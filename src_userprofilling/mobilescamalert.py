# -*- coding: utf-8 -*-
"""MobileScamAlert.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ShHm6FqlU1qfnwqWpSjUUR77qyXPuHfA
"""

# Load model directly
from transformers import AutoTokenizer, AutoModelForSequenceClassification

tokenizer = AutoTokenizer.from_pretrained("JeswinMS4/scam-alert-mobile-bert")
model = AutoModelForSequenceClassification.from_pretrained("JeswinMS4/scam-alert-mobile-bert")

import requests
from io import BytesIO
from PIL import Image # type: ignore
import torch
from transformers import AutoFeatureExtractor, AutoModelForImageClassification

# Load the feature extractor and model
extractor = AutoFeatureExtractor.from_pretrained("nateraw/vit-base-beans")
model = AutoModelForImageClassification.from_pretrained("nateraw/vit-base-beans")

# Define a function to classify images
def classify_image(image):
    if image.mode != "RGB":
        image = image.convert("RGB")

    # Preprocess the image
    inputs = extractor(images=image, return_tensors="pt")
    outputs = model(**inputs)
    logits = outputs.logits
    probabilities = torch.softmax(logits, dim=1).squeeze()

    # Get the label with the highest probability
    predicted_label = torch.argmax(probabilities).item()
    confidence = probabilities[predicted_label].item()

    # Replace the following with your model's actual labels
    labels = model.config.id2label
    return labels[predicted_label], confidence

# Fetch the image from an API
def fetch_image(api_url):
    try:
        response = requests.get(api_url)
        response.raise_for_status()  # Check for request errors
        return Image.open(BytesIO(response.content))
    except requests.exceptions.RequestException as e:
        print(f"Error fetching image: {e}")
        return None

# Main function to process the image
def process_image_from_api(api_url):
    print("Fetching image from API...")
    image = fetch_image(api_url)
    if image is None:
        print("Failed to fetch or process the image.")
        return

    print("Classifying the image...")
    label, confidence = classify_image(image)
    print(f"Prediction: {label} (Confidence: {confidence:.2%})")
    return label, confidence

# Example usage
if __name__ == "__main__":
    # Replace this with the actual API URL that provides the image
    api_url = "https://example.com/api/get_ad_image"
    result = process_image_from_api(api_url)

    if result:
        label, confidence = result
        print(f"\nFinal Result: The ad is classified as '{label}' with {confidence:.2%} confidence.")

